apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: '../config/quality/quality.gradle'

apply from: "../detekt.gradle"

//fabric configuration
apply plugin: 'io.fabric'

def API_URL = "API_URL"

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libraries

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        applicationId cfg.applicationId
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode getDate().toBigInteger()
        versionName "${cfg.version_versionMajor}.${cfg.version_versionMinor}.${cfg.version_versionPatch}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file('../keystores/appkey.jks')
            storePassword '20iagt17'
            keyAlias 'appkey'
            keyPassword '20iagt17'
        }
        debug {
            storeFile file('../keystores/appkey.jks')
            storePassword '20iagt17'
            keyAlias 'appkey'
            keyPassword '20iagt17'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }
    }

    flavorDimensions "default"

    productFlavors {
        production {
            applicationId cfg.applicationId
            buildConfigField "String", API_URL, project.property('API_URL_PRODUCTION')
        }
        develop {
            applicationId cfg.applicationId
            buildConfigField "String", API_URL, project.property('API_URL_DEVELOP')
            applicationIdSuffix ".develop"
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

kapt {
    generateStubs = true
}

preBuild.dependsOn detekt

dependencies {
    implementation project(':domain')
    implementation project(':data')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:${libs.appcompat}"
    implementation "com.android.support.constraint:constraint-layout:${libs.constraint}"
    implementation "com.android.support:design:${libs.design}"

//    for testing:
//    testImplementation "junit:junit:${libs.junit}"
//    testImplementation "org.mockito:mockito-core:${libs.mockito}"
//    androidTestImplementation "org.mockito:mockito-android:${libs.mockito}"
//    androidTestImplementation "com.android.support.test:runner:${libs.testrunner}"
//    androidTestImplementation "com.android.support.test.espresso:espresso-core:${libs.espresso}"

    implementation "com.google.code.gson:gson:${libs.gson}"

    implementation "com.google.dagger:dagger:${libs.dagger}"
    kapt "com.google.dagger:dagger-compiler:${libs.dagger}"

    implementation "io.reactivex.rxjava2:rxjava:${libs.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${libs.rxandroid}"

    implementation "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${libs.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${libs.retrofit}"

    implementation "com.jakewharton:butterknife:${libs.butterknife}"
    kapt "com.jakewharton:butterknife-compiler:${libs.butterknife}"

    implementation "com.android.support:recyclerview-v7:${libs.recyclerview}"
    implementation "com.android.support:cardview-v7:${libs.cardview}"

    implementation "com.android.support:multidex:${libs.multidex}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    detekt "io.gitlab.arturbosch.detekt:detekt-cli:${libs.detekt}"

    implementation "com.squareup.picasso:picasso:${libs.piccaso}"
    implementation "jp.wasabeef:picasso-transformations:${libs.piccasoTransfor}"

    implementation "me.relex:circleindicator:${libs.circleIndicator}"

    implementation 'android.arch.persistence.room:runtime:1.1.1'
    kapt "android.arch.persistence.room:compiler:1.1.1"

//    fabric configuration:
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true
    }
}
repositories {
    mavenCentral()
    jcenter()
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHHmm')
    def file = new File(project.rootDir, 'version.properties')
    file.write(formattedDate)
    return formattedDate
}
